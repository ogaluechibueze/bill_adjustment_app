generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}

enum Role {
  CCRO
  HCC
  BM
  RH
  RA
  IA
  CIA
  MD
  ADMIN
}

enum Status {
  Pending
  Approved
  Rejected
}

enum Stage {
  CCRO
  HCC
  BM
  RH
  RA
  IA
  CIA
  MD
}

model User {
  id                    Int        @id @default(autoincrement())
  email                 String     @unique
  username              String     @unique
  password              String
  role                  Role
  bussinessUnit         String
  region                String     
  active                Boolean    @default(true)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  customers Customer[] @relation("CreatedBy")
}

model Customer {
  id                      Int       @id @default(autoincrement())
  globalAcctNo            String    @unique
  customerName            String
  region                  String?
  businessUnit            String?
  customerType            String?
  tariffClass             String?
  meterNumber             String?
  band                    String?
  marketerName            String?
  feedbackMarketer        String?
  pictorialEvidence       String?
  transformerName         String?
  feederId                Int?
  feederName              String?
  source                  String?
  previousReading         Int?
  presentReading          Int?
  lastReadDate            DateTime?
  readingConsistent       String?
  pictureReading          Int?
  pictureReadingDate      DateTime?
  premiseVisit            String?
  premiseType             String?
  ticketNo                String?
  initialDebt             Decimal?  @db.Decimal(12,2) //actual amount billed
  adjustmentAmount        Decimal?  @db.Decimal(12,2)  //total expected bill
  avgConsumption          Decimal?  @db.Decimal(12,2)
  totalConsumption        Decimal?  @db.Decimal(12,2)
  avgBilledAmount         Decimal?  @db.Decimal(12,2)                      
  balanceAfterAdjustment  Decimal?  @db.Decimal(12,2)  //adjustable Amount
  adjustmentStartDate     DateTime?
  adjustmentEndDate       DateTime?
  adjustmentPeriod        Int?
  defaultCapUnit          Decimal?  @db.Decimal(12,2)
  previousAdjustment      Decimal?  @db.Decimal(12,2)
  proposedAdjustment      Decimal?  @db.Decimal(12,2)   //adjustment amount//proposed adjustment
  finalAdjustment         Decimal?  @db.Decimal(12,2)
  adjustmentType          String?
  resultantBillingAmount  Decimal?  @db.Decimal(12,2)
  currentTotalAmount      Decimal?  @db.Decimal(12,2)
  ccroremarks             String?
  hccremarks              String?
  bmremarks               String?
  rhremarks               String?
  raremarks               String?
  iaremarks               String?
  ciaremarks              String?
  mdremarks               String?
  status                  Status    @default(Pending)
  approvalStage           Stage     @default(HCC)

  // âœ… Must always store the user who created this record
  createdById             Int?
  createdBy               User?      @relation("CreatedBy", fields: [createdById], references: [id])

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  Adjustment Adjustment[]
}

model CustomerDetails {
  id                      Int       @id @default(autoincrement())
  globalAcctNo            String    
  customerName            String
  customerAddress         String?
  region                  String?
  businessUnit            String?
  serviceUnit             String?
  customerType            String?
  meterNumber             String?
  tariffClassId           Int?
  tariffClass             TariffClass? @relation(fields: [tariffClassId], references: [id])
  band                    String?
  feederId                Int?
  feeder                  Feeder?   @relation(fields: [feederId], references: [id])
  feederName11kv          String
  feederName33kv          String?
  previousAdjustment      Decimal?  @db.Decimal(12,2)
  source                  String?
  ticketNo                String?
  billStatus              String?
  billMonth               Int?
  billYear                Int?
  transformerName         String?
  amountBilled            Decimal?  @db.Decimal(12,2)
  totalOutstanding        Decimal?  @db.Decimal(12,2)
  previousReading         Int?
}

model Consumption {
  id           Int      @id @default(autoincrement())
  feederId     Int
  month        Int
  year         Int
  consumption  Decimal  @db.Decimal(12,2) // kWh
  feeder       Feeder   @relation(fields: [feederId], references: [id])
}

model TariffClass {
  id      Int     @id @default(autoincrement())
  name    String  @unique   // e.g. R1, R2, C1, C2, MD1, MD2...
  tariffs Tariff[]
  customers CustomerDetails[]
}

model Tariff {
  id            Int          @id @default(autoincrement())
  tariffClassId Int
  month         Int
  year          Int
  rate          Decimal      @db.Decimal(12,4) // Naira per kWh
  tariffClass   TariffClass  @relation(fields: [tariffClassId], references: [id])
}

model Feeder {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  consumptions Consumption[]
  CustomerDetails CustomerDetails[]
}

model Adjustment {
   id           Int             @id @default(autoincrement())
  customerId   Int
  customer     Customer        @relation(fields: [customerId], references: [id])
  adjustmentStartDate DateTime?
  adjustmentEndDate   DateTime?
  adjustmentAmount    Decimal? @db.Decimal(12,2)
  balanceAfterAdjustment Decimal? @db.Decimal(12,2)
  totalAmount            Float? 
  items        AdjustmentItem[]
  createdAt    DateTime        @default(now())
}

model AdjustmentItem {
  id            Int       @id @default(autoincrement())
  adjustmentId  Int
  adjustment    Adjustment @relation(fields: [adjustmentId], references: [id])
  month         Int
  year          Int
  consumption   Decimal    @db.Decimal(12,2)
  tariff        Decimal    @db.Decimal(12,2)
  amount        Decimal    @db.Decimal(12,2)
}

model AdjustmentView {
  id           Int      @id @default(autoincrement())
  customerId   Int
  adjustmentId Int
  month        Int
  year         Int
  consumption  Decimal  @db.Decimal(12,2)
  tariff       Decimal  @db.Decimal(12,2)
  amount       Decimal  @db.Decimal(12,2)
  createdAt    DateTime @default(now())
}
